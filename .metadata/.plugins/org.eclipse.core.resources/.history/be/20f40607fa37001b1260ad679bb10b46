package class44_hashmap_build;

import java.util.ArrayList;
import java.util.LinkedList;

public class Test<K,V> {
	
	private class HMnode{
		K key;
		V value;
		
		public HMnode(K key,V value){
			this.key = key;
			this.value = value;
		}
	}
	private LinkedList<HMnode>[] buckets;
	private int size;
	
	public Test() {
		buckets = new LinkedList[4];
		for(int i=0;i<buckets.length;i++) {
			LinkedList<HMnode> l = new LinkedList();
			buckets[i] = l;
		}
	}
	
	public void put(K key,V value) {
		int bi= hashFunction(key);
		HMnode hasnode = findWithinBucket(key,bi);
		if(hasnode == null) {
			HMnode newHM = new HMnode(key,value);
			buckets[bi].addLast(newHM);
			this.size ++;
		}else {
			hasnode.value = value;
		}
		
		 double lamda = (this.size * 1.0)/buckets.length;
		 if(lamda>2.0) {
			 rehash();
		 }
	}
	
	private void rehash() {
		LinkedList<HMnode>[] oba = buckets;
		buckets = new LinkedList[oba.length*2];
		for(int i=0;i<buckets.length;i++) {
			LinkedList<HMnode> l = new LinkedList<>();
			buckets[i] = l;
		}
		this.size = 0;
		for(int j=0;j<buckets.length;j++) {
			for(int k=0;j<buckets[j].size();k++) {
				HMnode hasnode = oba[j].get(k);
				put(hasnode.key,hasnode.value);
			}
		}
	}

	private HMnode findWithinBucket(K key,int bi) {
		for(int i=0;i<buckets[bi].size();i++) {
			if(buckets[bi].get(i).key.equals(key)) {
				return buckets[bi].get(i);
			}
		}
		return null;
	}

	private int hashFunction(K key) {
		int temp = key.hashCode();
		return Math.abs(temp)%buckets.length;
	}
	
	public V get(K key) {
		int bi = hashFunction(key);
		HMnode hasnode = findWithinBucket(key, bi);
		if(hasnode == null) {
			return null;
		}else {
			return hasnode.value;
		}
	}
	
	public boolean containsKey(K key) {
		int bi = hashFunction(key);
		HMnode hasnode = findWithinBucket(key, bi);
		if(hasnode == null) {
			return false;
		}else {
			return true;
		}
	}
	
	public V remove(K key) {
		int bi = hashFunction(key);
		HMnode hasnode = findWithinBucket(key, bi);
		if(hasnode == null) {
			return null;
		}else {
		    V temp = hasnode.value;
		    buckets[bi].remove(hasnode);
		    this.size--;
			return temp;
		}
	}
	
	public ArrayList<K> keySet(){
		ArrayList<K> arr = new ArrayList<>();
		for(int i=0;i<buckets.length;i++) {
			for(int j=0;j<buckets[i].size();j++) {
				arr.add(buckets[i].get(j).key);
			}
		}
		return arr;
	}
	
	public void display() {
		for(int i=0;i<buckets.length;i++) {
			System.out.println("B"+i);
			for(int j=0;j<buckets[i].size();j++) {
				System.out.print("{"+ buckets[i].get(j).value+"} ");
			}
		}
	}

	
}
