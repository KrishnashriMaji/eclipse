package class44_hashmap_build;

import java.util.LinkedList;

public class Test<K,V> {
	
	private class HMnode{
		K key;
		V value;
		
		public HMnode(K key,V value){
			this.key = key;
			this.value = value;
		}
	}
	private LinkedList<HMnode>[] buckets;
	private int size;
	
	public Test() {
		buckets = new LinkedList[4];
		for(int i=0;i<buckets.length;i++) {
			LinkedList<HMnode> l = new LinkedList();
			buckets[i] = l;
		}
	}
	
	public void put(K key,V value) {
		int bi= hashFunction(key);
		HMnode hasnode = findWithinBucket(key,bi);
		if(hasnode == null) {
			HMnode newHM = new HMnode(key,value);
			buckets[bi].addLast(newHM);
			this.size ++;
		}else {
			hasnode.value = value;
		}
		
		 double lamda = (this.size * 1.0)/buckets.length;
		 if(lamda>2.0) {
			 rehash();
		 }
	}
	
	private void rehash() {
		// TODO Auto-generated method stub
		
	}

	private HMnode findWithinBucket(K key,int bi) {
		return null;
	}
	
	public V get(K key) {
		int bi = hasFunction(key);
		HMnode hasnode = findWithinBucket(key, bi);
		if(hasnode == null) {
			return null;
		}else {
			return hasnode.value;
		}
	}
	
	private int hashFunction(K key) {
		// TODO Auto-generated method stub
		return 0;
	}
	
}
