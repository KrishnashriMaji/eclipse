package geekster;

public class Class11 {
	
	public static void main(String[] args) {
//		int[] arr1 = { 2, 5, 7, 9, 11 };
//		int[] arr2 = { 1, 3, 7, 9, 10 };
//		int[] merged = mergeArray(arr1, arr2);
//		for (int val : merged) {
//			System.out.print(val + " ");
//		}

		int[] arr = { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 };
		int val = trap1(arr);
		System.out.println(val);
	}
	
	public static int trap(int[] arr) {
		if(arr.length ==0) {
			return 0;
		}
		int[] lmax = new int[arr.length];
		int[] rmax = new int[arr.length];
		lmax[0] = arr[0];
		for(int i=1;i<arr.length;i++) {
			lmax[i] = Math.max(arr[i], arr[i-1]);
		}
		rmax[arr.length-1]= arr[arr.length-1];
		for(int j=arr.length-2;j>=0;j--) {
			rmax[j] = Math.max(arr[j], arr[j+1]);
		}
		int ans = 0;
		for(int k=1;k<arr.length-1;k++) {
			int minWall = Math.min(lmax[k], rmax[k]);
			if(minWall>arr[k]) {
				ans += minWall-arr[k];
			}
		}
		return ans;
	}

	public static int trap1(int[] height) {
		if(height.length ==0) {
			return 0;
		}
		int[] lmax = new int[height.length];
		int[] rmax = new int[height.length];

		lmax[0] = height[0];

		for (int i = 1; i < height.length; i++) {
			lmax[i] = Math.max(height[i], lmax[i - 1]);
		}

		rmax[height.length - 1] = height[height.length - 1];
		for (int i = height.length - 2; i >= 0; i--) {
			rmax[i] = Math.max(height[i], rmax[i + 1]);
		}

		int ans = 0;

		for (int i = 1; i < height.length - 1; i++) {
			int minBoth = Math.min(lmax[i], rmax[i]);
			if (minBoth > height[i]) {
				ans += minBoth - height[i];
			}
		}

		return ans;
	}

	public static int[] mergeTwoSortedArrays(int[] arr1, int[] arr2) {
		int p1 = 0;
		int p2 = 0;
		int p3 = 0;
		int[] res = new int[arr1.length + arr2.length];

		while (p1 < arr1.length && p2 < arr2.length) {
			if (arr1[p1] < arr2[p2]) {
				res[p3] = arr1[p1];
				p1++;
			} else {
				res[p3] = arr2[p2];
				p2++;
			}
			p3++;
		}

		while (p1 < arr1.length) {
			res[p3] = arr1[p1];
			p1++;
			p3++;
		}

		while (p2 < arr2.length) {
			res[p3] = arr2[p2];
			p2++;
			p3++;
		}
		return res;
	}
	
	//---------------my approach--------------------------//

	public static int[] mergeArray(int[] arr1,int[] arr2) {
		int[] arr3 = new int[arr1.length+arr2.length];
		
		int f =0;
		int s =0;
		for(int i=0;i<arr3.length;i++) {
			if(f!=arr1.length && s !=arr2.length) {
				if(arr1[f]<arr2[s]) {
					arr3[i] = arr1[f];
					f++;
				}else {
					arr3[i] = arr2[s];
					s++;
				}
			}else if(f==arr1.length) {
				arr3[i] = arr2[s];
				s++;
			}else if(s==arr1.length) {
				arr3[i] = arr1[f];
				f++;
			}
			
		}
		
		return arr3;
	}

}
