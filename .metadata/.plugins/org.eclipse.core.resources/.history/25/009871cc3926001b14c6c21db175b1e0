package geekster;

import java.util.ArrayList;
import java.util.Stack;

public class Class33 {

	public static void main(String[] args) {
		int[] arr = {2,1,5,6,2,3};
		largestRectangleArea(arr);

	}
	
	 public int largestRectangleArea(int[] h) {
	        Stack<Integer> st=new Stack<>();
	        st.push(-1);
	        int maximum_area=0;
	        // 2,5,5,5,4,4,3,5
	        for(int i=0;i<h.length;i++){
	            if(st.peek()==-1||h[st.peek()]<h[i]){
	                st.push(i);
	            }else{
	                while(st.peek()!=-1&&h[st.peek()]>=h[i]){

	                    int height=h[st.pop()];
	                    int area=height*(i-st.peek()-1);
	                    maximum_area=Math.max(area,maximum_area);
	                }
	                st.push(i);
	            }
	        }
	        while(st.peek()!=-1){
	             int height=h[st.pop()];
	            int area=height*(h.length-st.peek()-1);
	            maximum_area=Math.max(area,maximum_area);

	        }
	        return maximum_area;

	    }
	 
	public static void hystograph(int[] arr) {
		ArrayList<Integer> list = new ArrayList<>();
		Stack<Integer> st = new Stack<>();
		for(int i=0;i<arr.length;i++) {
			if(i == 0) {
				st.add(i+1);
			}
			int temp = st.peek();
			if(arr[i]>arr[temp]) {
				st.add(i);
			}else if(!st.isEmpty()) {
				int t = st.peek();
				while(arr[i]<arr[t] && !st.isEmpty()) {
					list.add(arr[st.pop()]*((i+1)-t-1));
					
				}
				
			}
			
			
		}
		while(!st.isEmpty()) {
			int te = st.pop();
			int k;
			if(st.peek() != null) {
				 k = st.peek();
			}else {
				 k = te;
			}
			list.add(arr[te]*((arr.length+1)-k-1));
		}
		
		
		
		System.out.println(list);
	}
	
//	public static int max(ArrayList<Integer> arr) {
//		int max = arr[0];
//		for(int i =0;i<arr.length;i++) {
//			if(max<arr[i]) {
//				max = arr[i];
//			}
//		}
//		return max;
//	}

}
